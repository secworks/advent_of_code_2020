#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#=======================================================================
#
# day14.py
# --------
# Solutions to Advent of Code 2020, day 14.
# https://adventofcode.com/2020/day/14
#
#
#=======================================================================

import sys


#-------------------------------------------------------------------
#-------------------------------------------------------------------
def get_input(filename):
    l = []
    with open(filename,'r') as f:
        for line in f:
            l.append(line.strip())
    return l


#-------------------------------------------------------------------
# Extract write instructions ans associated mask from the
# input file.
#-------------------------------------------------------------------
def get_instructions(filename):
    iset = []
    raw = get_input(filename)
    instr = []
    for l in raw:
        if "mask" in l:
            # New set of instructions.
            # If not first add previous instr.
            if instr != []:
                iset.append(instr)

            # Start new instruction list for the given mask.
            instr = [("set_mask", l.split("=")[1][1:])]

        else:
            # Extract the actual mem operations.
            addr = int(l.split("=")[0][4:-2])
            data = int(l.split("=")[1])
            instr.append(("write_mem", addr, data))

    # Add final inst.
    iset.append(instr)
    return iset


#-------------------------------------------------------------------
#-------------------------------------------------------------------
def masked_update(mask, curr, data):
    return 42


#-------------------------------------------------------------------
#-------------------------------------------------------------------
def execute_instructions(iset):
    mem = {}
    curr_mask = ""
    for instr in iset:
        for i in instr:
            if i[0] == "set_mask":
                curr_mask = i[1]

            if i[0] == "write_mem":
                (cmd, addr, data) = i
                if addr in mem:
                    curr_value = mem[addr]
                else:
                    curr_value = 0

                mem[addr] = masked_update(curr_mask, curr_value, data)
    return mem


#-------------------------------------------------------------------
#-------------------------------------------------------------------
def problem1(filename):
    print("Problem 1")
    print("---------")

    iset = get_instructions(filename)
    mem = execute_instructions(iset)
    print(mem)
    print("")


#-------------------------------------------------------------------
#-------------------------------------------------------------------
def problem2(filename):
    print("Problem 2")
    print("---------")
    print("")


#-------------------------------------------------------------------
#-------------------------------------------------------------------
if __name__=="__main__":
    print("Advent of Code 2020, day 14")
    print("===========================")

    problem1("day14_input.txt")

    problem2("day14_input.txt")

    sys.exit(0)

#=======================================================================
#=======================================================================
